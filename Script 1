############################# STUDY COHORT SELECTION + APPLYING EXCLUSION CRITERIA ################################

import csv

with open('amd_sample.csv') as csv_file:  # Opens original CSV file that contains data from 169703 appointments attended by 3392 patients
    csv_reader = csv.reader(csv_file, delimiter=',')
    header = []
    paired_rows = []
    line_count = 0

    for row in csv_reader:  # iterate through each appointment in database
        if line_count == 0:  # following code only applies for header
            for i in range(len(row)):
                header.append(row[i])  # appends each column name into header list
            header.append("VA_12months")  # add new column (to be populated later) for VA at 12 months

            with open('amd_dissertation_dataset.csv', 'w', newline='') as file:  # Create new CSV for our study cohort
                writer = csv.writer(file)
                writer.writerow(header)   # add header to new file

        else:  # i.e. for all rows other than the header

            # Column 2 = DaysSinceBaseline
            # Column 4 = Ethnicity
            # Column 11 = Injection number
            # Column 18 = Visual Acuity measurement
            # Column 25 = OCT scan measurement

            # Selects appointments that correspond to baseline, injection number 1
            # and where neither VA or OCT measurements are missing (exclusion criteria)
            
            if len(paired_rows) == 0 and int(row[2]) == 0 and row[11] == "1" and row[18] != "" and row[25] != "":
                if row[4] == "":  # If ethnicity column is blank replace with "Unknown"
                    row[4] = "Unknown"
                paired_rows.append(row)  # Saves initial appointment data to temporary list called paired_rows

            # Column 1 is the anonymous ID
            # Column 5 is the eye (right/left)

            # If we have a baseline appointment already saved, this code segment looks for a future appointment for the same 
            # eye 11-13 months in the future. Only appointments where VA measurement is not missing is selected.
            
            elif len(paired_rows) == 1 and row[1] == paired_rows[0][1] and row[5] == paired_rows[0][5] and \
                    (int(row[2]) > 334) and (int(row[2]) < 396) and row[18] != "":
                paired_rows.append(row)
               
                if int(row[18]) >= 70:
                    paired_rows[0].append("Above")  # assigns outcome label of Above to patients with VA at 1 year â‰¥ 70
                else:
                    paired_rows[0].append("Below")  # assigns outcome label of Below to patients with VA at 1 year < 70

            # Checks if current appointment being iterated through is now a different patient or eye 
            elif len(paired_rows) == 1 and (row[1] != paired_rows[0][1] or row[5] != paired_rows[0][5]):
                paired_rows = []  # reset

            # Check to see whether current appointment is actually closer to 365 days and replaces previous data if so.
            if len(paired_rows) == 2 and row[1] == paired_rows[0][1] and row[5] == paired_rows[0][5] and row[18] != "":
                difference = abs(int(row[2]) - 365)
                old_difference = abs(int(paired_rows[1][2]) - 365)
                if difference < old_difference:  # if new appointment is  closer to 365 days, previous appointment is deleted and outcome labels are updated
                    del paired_rows[1]
                    paired_rows.append(row)
                    if int(row[18]) >= 70:  
                        paired_rows[0][-1] = "Above" 
                    else:
                        paired_rows[0][-1] = "Below"

            # If baseline appointment and suitable follow-up appointment has been found we add the baseline data
            # (along with the outcome label that was appended) to the new CSV file of our study cohort
            
            if len(paired_rows) == 2 and (row[1] != paired_rows[0][1] or row[5] != paired_rows[0][5]):
                with open('amd_dissertation_dataset.csv', 'a', newline='') as file:
                    writer = csv.writer(file)
                    writer.writerow(paired_rows[0])

                # reset for future iterations
                paired_rows = []

                # Starts checking again whether current row is eligible
                # to be included in study cohort and adds to paired_rows
                if len(paired_rows) == 0 and int(row[2]) == 0 and row[11] == "1" and row[18] != "" and row[25] != "":
                    if row[4] == "":
                        row[4] = "Unknown"
                    paired_rows.append(row)

        line_count += 1
